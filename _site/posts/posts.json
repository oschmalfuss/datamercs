[
  {
    "path": "posts/welcome/",
    "title": "Welcome to OS DataMercs",
    "description": "OS DataMercs is inspired to elevate the publishing industry by consulting, encouraging and providing most recognized metadata services.",
    "author": [
      {
        "name": "Olaf Schmalfuß",
        "url": "https://www.datamercs.net"
      }
    ],
    "date": "2022-03-04",
    "categories": [],
    "contents": "\r\n// Trinity of Discovery\r\nThe “Trinity of Discovery” exhibits our holistic approach to metadata delivery and creation, and sets the framework to a title’s - may it be eBook or journal - (meta) data needs.\r\nIt is also what most libraries would expect to receive from a publisher one way or another, either directly or through third party services or union catalogues:\r\nmeta data and discovery from the smallest chunk down to collection level, because\r\n\r\n»We are not going to buy any of your eBooks if users cannot discover them.«\r\n(an unnamed head of aqcuisition)\r\n\r\nMARC records, KBARTs, ONIX and JATS XML are key, especially to scientific publishing houses!\r\nNaturally, one could go beyond that, if we talked about linked data, which would even aim at the most atomic bits of data points, but since most publishers usually have hardly even the basics covered, the trinity shall serve as our North star here.\r\nThus, this site aims to showcase several tools and workflows around that, so that even the smallest publisher, or inclined librarian, can build upon that and implement their own (half-) automated data pipelines, from ERP to .MRC;-)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/welcome/trinity of discovery.jpg",
    "last_modified": "2022-03-04T23:13:37+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-02-28-rough-guide-to-git-large-file-storage-lfs/",
    "title": "rough guide to Git Large File Storage (LFS)",
    "description": "Git Large File Storage (LFS) allows for versioning files larger than 100MB on GitHub. While this seems like a no brainer at first glance, it also comes with some draw backs. Thus, here's a rough guide on howto set-up Git-LFS and uninstall from a project again.",
    "author": [
      {
        "name": "Olaf Schmalfuss",
        "url": "https://www.datamercs.net"
      }
    ],
    "date": "2022-02-28",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nSet-up\r\ncommit and push to GitHub\r\ncheck files\r\npush all referenced Git-LFS files\r\n\r\nIssues with Git-LFS\r\nhow to uninstall Git-LFS\r\n\r\n\r\nIntroduction\r\nGitHub limits the size of files allowed in repositories to up to 100MB. For working with larger files like data sets or binaries such as MARC record sets, we have to find a solution around that limit. In comes Git Large File Storage (LFS)↗.\r\nGit-LFS is an open source Git extension for versioning files above 100MB by replacing them with text pointers inside Git, while storing the file contents outside of the normal Git project on a remote server like GitHub.com.\r\nsee more info here: https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github\r\nSet-up\r\ndownload Git-LFS here https://git-lfs.github.com/ and install.\r\nopen Git Bash\r\nverify that the installation was successful:\r\n\r\n$ git lfs install\r\n> Git LFS initialized.\r\n\r\ncd into the repository’s directory we’d like to use with Git-LFS.\r\nselect the file types or files we’d like Git-LFS to manage (or directly edit .gitattributes)\r\nassociate a whole file type, e.g. .ZIP, with Git-LFS by file extension:\r\n\r\n# e.g. associate all .ZIP files with Git-LFS:\r\n\r\n$ git lfs track \"*.zip\"\r\n> Adding path *.zip\r\n\r\nassociate a single file with Git-LFS:\r\n\r\n$ git lfs track --filename [path to file]\r\n> Tracking \"[path to file]\"\r\n\r\ncommit and push to GitHub\r\n\r\n$ git add [path to file]\r\n$ git commit -m \"update MARC\"\r\n$ git push origin main\r\n\r\ncheck files\r\nlist all the (large) files manage by Git-LFS.\r\n\r\n$ cd [path to repository]\r\n$ git lfs ls-files\r\n\r\npush all referenced Git-LFS files\r\n\r\n$ git lfs push --all origin\r\n\r\nIssues with Git-LFS\r\nSo while on paper we get the benefit of being able to handle 100MB+ files, Git-LFS also suddenly adds limitations to your repository’s total size as well as to the bandwidth, i.e. 1GB each, resulting in the following error message:\r\n\r\nUploading LFS objects: 0% (0/1), 0 B | 0 B/s, done. batch response: This repository is over its data quota. Account responsible for LFS bandwidth should purchase more data packs to restore access.\r\n\r\nThis can happen really fast, especially if you have lots of med sized files and work not as organized or efficient in your repository … as an librarian maybe…\r\nTherefore, it is also good to know how to uninstall Git-LFS and start over more organized moving forward.\r\nThe other solution would be a paid subscription.\r\nhow to uninstall Git-LFS\r\nSimply removing the files from the project does not work, as the Git-LFS objects still exist on the remote storage and will continue to count toward the Git-LFS storage quota. To remove Git-LFS objects from a repository, delete and recreate the repository.\r\nremove LFS hooks\r\n\r\n$ git lfs uninstall\r\n\r\nremove the LFS filters from .gitattributes\r\nlist LFS files using\r\n\r\n$ git lfs ls-files | sed -r 's/^.{13}//' > lfs_files.txt\r\n\r\nrun git rm –cached for each file\r\n\r\nwhile read line; do\r\n  git rm --cached \"$line\"\r\ndone < lfs_files.txt\r\n\r\nrun git add for each file\r\n\r\nwhile read line; do\r\n  git add \"$line\"\r\ndone < lfs_files.txt\r\n\r\ncommit everything\r\n\r\n$ git add .gitattributes\r\n$ git commit -m \"de-lfs\"\r\n$ git push origin\r\n\r\ncheck that no LFS files remain\r\n\r\n$ git lfs ls-files\r\n\r\nremove LFS cache and temp file\r\n\r\n$ rm -rf .git/lfs lfs_files.txt\r\n\r\net voilà\r\nnew & easy solution\r\n\r\n\r\n$ git lfs uninstall\r\n\r\n# then manually remove the LFS filters from .gitattributes\r\n\r\n$ git lfs untrack \"*.zip\"\r\n$ git add --renormalize \r\n$ git commit -m \"de-lfs\"\r\n$ git push origin\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-02-28-rough-guide-to-git-large-file-storage-lfs/GITLFS.png",
    "last_modified": "2022-03-05T02:00:34+01:00",
    "input_file": {},
    "preview_width": 511,
    "preview_height": 272
  },
  {
    "path": "posts/2021-12-18-a-rough-guide-to-vpns/",
    "title": "A rough guide to VPNs",
    "description": "Since YouTube influencer marketing you know you need a VPN (i.e. virtual private network). There many of services, mostly commercial, but also some free and academic options.  \nWhile VPNs are a solid solution in an institutional environment to access one's company's network, or for circumventing censorship or geo-blocking, there're wild claims being made when it comes to potential capabilities of VPNs or internet threats in general.  \nThis article is not intended to deeply elaborate on that, but serves as a personal memo as well as a *thought piece*.",
    "author": [
      {
        "name": "Olaf Schmalfuss",
        "url": "https://www.datamercs.net"
      }
    ],
    "date": "2021-12-18",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nVPN Gate\r\nVPN Gate server list\r\nVPN Client\r\n\r\nReality check - why you shouldn’t trust VPNs\r\nBut what’s the solution to VPNs?\r\nAll you need to know about Very Pwnable Networks (VPNs)\r\n\r\n\r\nIntroduction\r\nSince YouTube influencer marketing you know you need a VPN (i.e. virtual private network). There are lots of services, mostly commercial after all, but also some free and academic options.\r\nWhile VPNs are definitely a solution in an institutional/ company setting to access one’s company’s intranet remotely, or for safely circumventing national censorship and geo-blocking by streaming or national broadcasting services, there’re wild claims being made when it comes to potential capabilities of VPNs or use cases.\r\nThis article is not intended to deeply elaborate on that, but serves as a personal memo as well as a small thought piece in the sanity check below.\r\nFor more knowledgeable information on VPNs, see the EFF’s article on Choosing the VPN That’s Right for You↗.\r\nVPN Gate\r\nVPN Gate Academic Experiment Project↗ is an online service as an academic research at Graduate School of University of Tsukuba, Japan. The purpose of this research is to expand the knowledge of “Global Distributed Public VPN Relay Servers”.\r\nThe project is not only for consumption, but anyone is encouraged to participate↗.\r\nDo we trust it? No. Do we use it? For our purposes, yes.\r\nVPN Gate server list\r\nlist of 7000+ public VPN relay servers by volunteers around the world:\r\n\r\nhttps://www.vpngate.net/en/\r\n\r\n\r\nU/N: vpn\r\nP/W: vpn\r\n\r\nVPN Client\r\nSoftEther VPN↗ is an Open-Source, free, cross-platform multi-protocol VPN program, developed as an academic project from University of Tsukuba↗, under the Apache License 2.0.\r\nDownload, install and set-up:\r\n\r\nhttps://github.com/SoftEtherVPN/SoftEtherVPN\r\n\r\nReality check - why you shouldn’t trust VPNs\r\nVPN advertisements are common on social media these days and making the wildest claims about privacy, security and anonymity. Basically just with the click of a button, you’re safe and virtually invisible on the internet, surfing “through an unbreakable tunnel that no one can look into, be it cybercriminals, governments, or internet service providers”!?\r\nNaturally, this is not true, as technically one is basically only changing IPs1 and very importantly WHO is tracking your internet usage now. Switching (trust) from a local Internet Service provider (ISP) to another third party service with usually unclear jurisdictions.\r\nOf course, all VPN providers will claim that according to their policy they’d encrypt your data, never keep any history logs, DNS requests or other personal information and whatnot, but one should treat that as nothing more than marketing, especially when the service has any ties to any of the FVEY↗ alliance members and ask: who hasn’t!?\r\nThis question is relevant, because companies operating from the US or the UK (for example) can be forced to spy on users without having any legal way to disclose that fact to their users, possibly bound with a gag order that cannot be violated without risking severe legal consequences. Of course, they will comply, while marketing wise they’ll phrase it such they didn’t.\r\nMoreover, even if a service operates from a safe haven, what about their (physical) infrastructure: does the VPN provider actually OWN those machines? Or are they rather outsourced and rented from a 3rd party located in a 3rd (or even 4th) party network, or running services on virtual machines hosted by third parties? Does anyone believe that VPN providers can easily offer exit machines in two dozen countries by deploying hardware they own and operate in datacentres they can trust?\r\nIn an ideal setting, your VPN provider owns all of the hardware AND the network it operates, yet, after all, most VPN providers are primarily businesses! And the primary objective of most businesses is revenue and driving costs down…\r\nAs a result, one of the easiest ways to infiltrate and exploit VPN infrastructure is simply to offer cheap (possibly even tax-payer subsidised) server hosting, “tailored for your company’s needs”.\r\nAnd even worse, some “VPN” services are simply outright scams↗.\r\nBesides unscrupulous organizations that make online privacy harder for the general population, like the various government agencies wiretapping and breaking into systems to steal our data, or ISP/ VPN services that mess with user traffic and inject ads to earn some extra revenue by exploiting their customers for advertising, the technology itself is not inherently safe easy to deal with either, e.g. due to\r\nDNS leaks↗, IPv6 leaks↗\r\nProblems with the cryptographic routines used, like\r\nOpenSSL↗, such as Heartbleed, POODLE, FREAK, Logjam etc.\r\nthe literal VULCANDEATHGRIP↗\r\n…\r\n\r\nBrowser related leaks↗ and bad crypto config↗\r\nUn- or improperly configured firewalls\r\nbrowser fingerprinting↗, ad- and social media network tracking\r\nmalicious websites or compromised networks\r\netc\r\nAgain, for more knowledgeable information see the EFF’s guide on Choosing the VPN That’s Right for You↗.\r\nBut what’s the solution to VPNs?\r\ndon’t fall for it and manage your expectations accordingly\r\nTOR↗ might come handy as well\r\nTreat every service on the internet as if they had an API to Big Brother, which they most likely do. While it looks inconspicuous on the front end, in the back-end your data might already be consolidated.\r\noperate in meat-space\r\nvisit a library!\r\nAll you need to know about Very Pwnable Networks (VPNs)\r\nWhile primarily intended as advertisements for their VPN service “IPredator”, co-founded by Pirate Bay co-founder Peter Sunde, the comics actually raised some valid points to consider, that obviously largely served as the inspiration for the above.\r\nAs neither their site nor their services are available any longer, this “comic” (or “textbook”!?) can now be found below again for educational purposes:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nUsing a VPN masks the IP address assigned by your ISP from the sites that you access, adding a layer of privacy. Along with masking your origin IP address, it also encrypts your data while in transit to the site you are accessing, which actually is useful especially when connected to an insecure Wi-Fi network in a café, airport, library, or somewhere else.↩︎\r\n",
    "preview": {},
    "last_modified": "2022-03-11T10:59:42+01:00",
    "input_file": "a-rough-guide-to-vpns.knit.md"
  },
  {
    "path": "posts/2020-08-15-z3950-for-dummies/",
    "title": "Z39.50 for Dummies",
    "description": "This (cleaning up the vaults) is a shameless re-post of a now no longer available blogpost by Wolfram Schneider from Index Data, originally posted in 5 parts 2009/08/27-2010/01/13, which tought me a lot about implementing Z39.50 and the YAZ toolkit. I even printed it out back in the day and it is still worth reading today!",
    "author": [
      {
        "name": "Wolfram Schneider",
        "url": "https://wolfram.schneider.org"
      },
      {
        "name": "Olaf Schmalfuß",
        "url": {}
      }
    ],
    "date": "2020-08-15",
    "categories": [],
    "contents": "\r\n\r\nContents\r\n// Z39.50 for Dummies\r\n// Z39.50 for Dummies Series - Part 1\r\n// Z39.50 for Dummies Part 2\r\n// Z39.50 for Dummies Series - Part 3\r\n// Z39.50 for Dummies - Part 4\r\n// Z39.50 for Dummies - Part 5\r\n\r\n\r\n// Z39.50 for Dummies\r\nby Wolfram Schneider on 2009/08/27\r\n(http://www.indexdata.com/blog/2009/08/z3950-dummies)\r\nOne of the things Index Data is known for is the YAZ toolkit - an open source programmers’ toolkit supporting the development of Z39.50/SRW/SRU clients and servers. The first release was in 1995 and I’ve been using it for my own metasearch engine ZACK Gateway since 1998, long before I joined Index Data.\r\nZ39.50 is a client-server protocol for searching and retrieving information from remote computer databases. It is a mature low level protocol like HTTP and FTP. You don’t implement Z39.50 yourself, you use the YAZ utilities and the libraries and frameworks for in other languages (C++, PHP, Perl, etc.).\r\nThere are many people who thinks that Z39.50 is a dead standard, and hard to understand. That is not true. Z39.50 is still growing in use, stable and very fast. It is the only widely available protocol for metasearch.\r\nUsing Z39.50 is not harder than using FTP. I think that the overhead for learning Z39.50 is less than a half day for an experienced programmer. Every problem which you have later is not related to the Z39.50 protocol itself, it is related to underlying system behind the Z39.50 server. Keep in mind that Z39.50 is an API to access (bibliographic) databases. It does not define how the data is structured and indexed in the database.\r\n// Z39.50 for Dummies Series - Part 1\r\nI will now start a Z39.50 for Dummies series and show some example how to access a remote database.\r\nI’m using in the following demos the zoomsh program from the YAZ toolkit\r\nLet’s start with a simple question: does the Library of Congress have the book “library mashups”? (I strongly recommend you buy this book - I wrote chapter 19):\r\n$ zoomsh \"connect z3950.loc.gov:7090/voyager\" 'search \"library mashups\"' quit\r\n\r\nz3950.loc.gov:7090/voyager: 2 hits\r\nThat’s all! Only one line on the command line. A SRU or SOAP request would not be shorter.\r\nNow, retrieve the record:\r\n$ zoomsh \"connect z3950.loc.gov:7090/voyager\" 'search \"library mashups\"' \"show 0 1\" \"quit\"\r\n\r\nz3950.loc.gov:7090/voyager: 2 hits\r\n0 database=VOYAGER syntax=USmarc schema=unknown\r\n02438cam 22003018a 4500\r\n001 15804854\r\n005 20090710141909.0\r\n008 090706s2009 nju b 001 0 eng\r\n906 $a 7 $b cbc $c orignew $d 1 $e ecip $f 20 $g y-gencatlg\r\n925 0 $a acquire $b 2 shelf copies $x policy default\r\n955 $b rg11 2009-07-06 $i rg11 2009-07-06 $a rg11 2009-07-08 to Policy (CLED/SHED)\r\n $a td04 2009-07-09 to Dewey $w rd14 2009-07-10\r\n010 $a 2009025999\r\n020 $a 9781573873727\r\n040 $a DLC $c DLC\r\n050 00 $a Z674.75.W67 $b L52 2009\r\n082 00 $a 020.285/4678 $2 22\r\n245 00 $a Library mashups : $b exploring new ways to deliver library\r\ndata / $c edited by Nicole C. Engard.\r\n260 $a Medford, N.J. : $b Information Today, Inc., $c c2009.\r\n263 $a 0908\r\n300 $a p. cm.\r\n504 $a Includes bibliographical references and index.\r\n505 0 $a What is a mashup? / Darlene Fichter -- Behind the scenes : some technical details on mashups / Bonaria Biancu -- Making your data available to be mashed up / Ross Singer -- Mashing up with librarian knowledge / Thomas Brevik -- Information in context / Brian Herzog -- Mashing up the library website / Lichen Rancourt -- Piping out library data / Nicole C. Engard -- Mashups @ Libraries interact / Corey Wallis -- Library catalog mashup : using Blacklight to expose collections / Bess Sadler, Joseph Gilbert, and Matt Mitchell -- Breaking into the OPAC / Tim Spalding -- Mashing up open data with biblios.net Web services / Joshua Ferraro -- SOPAC 2.0 : the thrashable, mashable catalog / John Blyberg -- Mashups with the WorldCat Affiliate Services / Karen A. Coombs -- Flickr and digital image collections / Mark Dahl and Jeremy McWilliams -- Blip.tv and digital video collections in the library / Jason A. Clark -- Where's the nearest computer lab? : mapping up campus / Derik A. Badman -- The repository mashup map / Stuart Lewis -- The LibraryThing API and libraries / Robin Hastings -- ZACK bookmaps / Wolfram Schneider -- Federated database search mashup / Stephen Hedges, Laura Solomon, and Karl Jendretzky -- Electronic dissertation mashups using SRU / Michael C. Witt.\r\n650 0 $a Mashups (World Wide Web) $x Library applications.\r\n650 0 $a Libraries and the Internet.\r\n650 0 $a Library Web sites $x Design.\r\n650 0 $a Web site development.\r\n700 1 $a Engard, Nicole C., $d 1979-\r\n963 $a Amy Reeve; phone: 609-654-6266; email: areeve @ infotoday.com; bc: nellor @ infotoday.com\r\nThe default exchange format for bibliographic records in Z39.50 is MARC21. This is maybe not what you want to parse yourself.\r\nOk, now let’s download the record in XML format:\r\n$ zoomsh \"connect z3950.loc.gov:7090/voyager\" 'search \"library mashups\"' \"show 0 1 xml\" \"quit\"\r\n\r\nz3950.loc.gov:7090/voyager: 2 hits\r\n0 database=VOYAGER syntax=USmarc schema=unknown\r\n<record xmlns=\"http://www.loc.gov/MARC21/slim\">\r\n <leader>02438cam a22003018a 4500<\/leader>\r\n <controlfield tag=\"001\">15804854<\/controlfield>\r\n <controlfield tag=\"005\">20090710141909.0<\/controlfield>\r\n <controlfield tag=\"008\">090706s2009 nju b 001 0 eng <\/controlfield>\r\n <datafield tag=\"906\" ind1=\" \" ind2=\" \">\r\n <subfield code=\"a\">7<\/subfield>\r\n <subfield code=\"b\">cbc<\/subfield>\r\n <subfield code=\"c\">orignew<\/subfield>\r\n <subfield code=\"d\">1<\/subfield>\r\n <subfield code=\"e\">ecip<\/subfield>\r\n <subfield code=\"f\">20<\/subfield>\r\n <subfield code=\"g\">y-gencatlg<\/subfield>\r\n <\/datafield>\r\n\r\n[large XML output...]\r\n<\/record>\r\nYou can parse the XML output with your favorite tools, usually an XSLT style sheet.\r\nNext time I will show you how to run a meta search in one line.\r\n-Wolfram\r\nUPDATE: The latest release of YAZ, inspired by this blog post, supports client-side mapping of MARC to MARCXML, so you can dump XML records even from targets that do not support XML.\r\n// Z39.50 for Dummies Part 2\r\nby Wolfram Schneider on 2009/08/31\r\n(http://www.indexdata.com/blog/2009/08/z3950-dummies-part-2)\r\nIn the last blog post Z39.50 for Dummies I gave an introduction on how to use the zoomsh program to access the Z39.50 Server of the Library of Congress.\r\nToday I will show you how to run a simple metasearch on the command line. You want to know which library has the book with the ISBN 0-13-949876-1 (UNIX network programming / W. Richard Stevens)? You can run the zoomsh in a shell loop.\r\nPut the list of databases (zURL’s) line by line in the text file zurl.txt:\r\nz3950.loc.gov:7090/voyager\r\nmelvyl.cdlib.org:210/CDL90\r\nlibrary.ox.ac.uk:210/ADVANCE\r\nz3950.library.wisc.edu:210/madison\r\nand run a little loop in a shell script:\r\n$ for zurl in `cat zurl.txt`\r\ndo\r\n zoomsh \"connect $zurl\" \\\r\n \"search @attr 1=7 0-13-949876-1\" \"quit\"\r\ndone\r\n\r\n\r\nz3950.loc.gov:7090/voyager: 0 hits\r\nmelvyl.cdlib.org:210/CDL90: 1 hits\r\nlibrary.ox.ac.uk:210/ADVANCE: 1 hits\r\nz3950.library.wisc.edu:210/madison: 0 hits \r\nOf course it takes time to run one search request after another. How about a parallel search? Modern xargs(1) commands on BSD based Operating Systems (MacOS, FreeBSD) and the GNU xargs supports to run several processes at a time.\r\nThis example runs up to 2 search request at a time and is 2 times faster than the shell script above:\r\n$ xargs -n1 -P2 perl -e 'exec \"zoomsh\", \"connect $ARGV[0]\", \"search \\@attr 1=7 0-13-949876-1\", \"quit\"' &lt; zurl.txt\r\n\r\nmelvyl.cdlib.org:210/CDL90: 1 hits\r\nlibrary.ox.ac.uk:210/ADVANCE: 1 hits\r\nz3950.loc.gov:7090/voyager: 0 hits\r\nz3950.library.wisc.edu:210/madison: 0 hits\r\nYou see here that the order of responses is different, the fastest databases wins and displayed first.\r\nI think it is safe to run up to 20 searches in parallel on modern hardware. Note that there is a lot of process overhead here, for each request 2 processes will be executed. If a connection hangs you must wait until you hit the time out.\r\nThis was an example how easy it is to run your own metasearch on the command line. If you want setup a real metasearch for your organization I recommend to try out our metasearch middleware pazpar2, featuring merging, relevance ranking, record sorting, and faceted results. In a nutshell, pazpar2 is a web-oriented Z39.50 client. It will search a lot of targets in parallel and provide on-the-fly integration of the results. The interface is entirely webservice-based, and you can use it from any development environment. The pazpar2 home page is http://www.indexdata.com/pazpar2\r\n// Z39.50 for Dummies Series - Part 3\r\nby Wolfram Schneider on 2009/09/09\r\n(http://www.indexdata.com/blog/2009/09/z3950-dummies-series-part-3)\r\nThis is part 3 of the Z39.50 series for dummies. In the first part I explained what Z39.50 is and how to run a simple search. In the second part I showed how to run a simple meta search on the command line.\r\nI searched for the book: UNIX network programming / W. Richard Stevens, ISBN 0-13-949876-1 in four large libraries:\r\n$ for zurl in `cat zurl.txt`\r\ndo\r\n zoomsh \"connect $zurl\" \\\r\n \"search @attr 1=7 0-13-949876-1\" \"quit\"\r\ndone\r\n\r\nz3950.loc.gov:7090/voyager: 0 hits\r\nmelvyl.cdlib.org:210/CDL90: 1 hits\r\nlibrary.ox.ac.uk:210/ADVANCE: 1 hits\r\nz3950.library.wisc.edu:210/madison: 0 hits\r\nOnly 2 out of 4 libraries own this must-have book. Can this be true? Well, lets modify the ISBN and search without dashes (‘-’)\r\n$ for zurl in `cat zurl.txt`\r\ndo\r\n zoomsh \"connect $zurl\" \\\r\n \"search @attr 1=7 0139498761\" \"quit\"\r\ndone\r\n\r\nz3950.loc.gov:7090/voyager: 1 hits\r\nmelvyl.cdlib.org:210/CDL90: 1 hits\r\nlibrary.ox.ac.uk:210/ADVANCE: 1 hits\r\nz3950.library.wisc.edu:210/madison: 1 hits\r\nBingo - every library has a copy of UNIX network programming by W. Richard Stevens!\r\nZ39.50 defines the syntax to search in a database. It does not define the semantic of a search, how an ISBN is structured.\r\nIf you build a search engine on top of Z39.50 you need an additional layer to handle the semantic of a search for each database. (You need this layer too to add workaround for broken implementations)\r\nIn this example above we must remove the dashes in an ISBN search for the Library of Congress and University of Wisconsin-Madinson Libraries.\r\nAnother thing which you must be aware: libraries use for historical reasons different character sets: utf-8, iso8859-1, iso5426 and marc8. You must convert your search query to the right character set for each library, for searching and retrieving the records.\r\nIn this article I described the challenges to run a meta search on top of Z39.50. All these problems are due the underlying databases and not Z39.50 - you will have the same problems if you use a web based XML services such as SRU or a proprietary, vendor-based API. The truth is that running a metasearch is not a trivial task.\r\n// Z39.50 for Dummies - Part 4\r\nby Wolfram Schneider on 2009/10/12\r\n(http://www.indexdata.com/blog/2009/10/z3950-dummies-part-4)\r\nThis is part 4 of the series Z39.50 for dummies.\r\nLibraries store and exchange bibliographic data in MARC records. A MARC record is a MAchine-Readable Cataloging record. It was developed at the Library of Congress (LoC) beginning in the 1960s.\r\nA dump of the LoC catalog (and other libraries) is available at the Internet Archive in the collection marcrecords. The LoC catalog dump is split into 29 files, part01.dat to part29.dat. Each file is roughly 200MB large.\r\nThe great news is that the data from LoC is public domain (already paid by the US taxpayers, thank you!) and you can use the data for your own system.\r\nBefore you can import data, you must validate, convert, or fix the bibliographic data. I will show now how you can do this with the Index Data YAZ toolkit. The YAZ toolkit contains the program yaz-marcdump to dump MARC records.\r\nyaz-marcdump called without an option will print the records in line format:\r\n$ yaz-marcdump part01.dat | more\r\n\r\n00720cam  22002051  4500\r\n001    00000002\r\n003 DLC\r\n005 20040505165105.0\r\n008 800108s1899    ilu           000 0 eng\r\n010    $a    00000002\r\n035    $a (OCoLC)5853149\r\n040    $a DLC $c DSI $d DLC\r\n050 00 $a RX671 $b .A92\r\n100 1  $a Aurand, Samuel Herbert, $d 1854-\r\n245 10 $a Botanical materia medica and pharmacology; $b drugs considered from a botanical, pharmaceutical, physiological, therapeutical and toxicological standpoint. $c By S. H. Aurand.\r\n260    $a Chicago, $b P. H. Mallen Company, $c 1899.\r\n300    $a 406 p. $c 24 cm.\r\n500    $a Homeopathic formulae.\r\n650  0 $a Botany, Medical.\r\n650  0 $a Homeopathy $x Materia medica and therapeutics.\r\n[...]\r\nFirst converts the MARC21 records in MARC-8 encoding to MARC21 in UTF-8 encoding:\r\n$ yaz-marcdump -f marc-8 -t utf-8 -o marc \\\r\n       part01.dat > part.mrc\r\nFor MARC21, the leader offset 9 tells whether it is really MARC8 (almost always the case) or whether it’s UTF-8. A MARC21 must have position 9=‘a’ (value 97). For this reason, the option -l for yaz-marcdump may come in handy:\r\n$ yaz-marcdump -f marc-8 -t utf-8 -o marc \\\r\n       -l 9=97 part01.dat > part.mrc\r\nIf you prefer MARCXML instead MARC21 records you may convert the records:\r\n$ yaz-marcdump -o marcxml -f MARC-8 -t UTF-8 \\\r\n    part01.dat > part.marcxml\r\n\r\n<collection xmlns=\"http://www.loc.gov/MARC21/slim\">\r\n<record>\r\n  <leader>00720cam a22002051  4500<\/leader>\r\n  <controlfield tag=\"001\">   00000002 <\/controlfield>\r\n  <controlfield tag=\"003\">DLC<\/controlfield>\r\n  <controlfield tag=\"005\">20040505165105.0<\/controlfield>\r\n  <controlfield tag=\"008\">800108s1899    ilu           000 0 eng\r\n<\/controlfield>\r\n  <datafield tag=\"010\" ind1=\" \" ind2=\" \">\r\n    <subfield code=\"a\">   00000002 <\/subfield>\r\n  <\/datafield>\r\n  <datafield tag=\"035\" ind1=\" \" ind2=\" \">\r\n    <subfield code=\"a\">(OCoLC)5853149<\/subfield>\r\n  <\/datafield>\r\n[...]\r\nThe Library of Congress has over 7 million records. That’s huge data, total 5.6GB raw data. If you compress that data it is only 1.7GB.\r\nTo convert compressed data, run yaz-marcdump in a UNIX pipe:\r\n$ zcat part01.dat.gz | yaz-marcdump -f MARC-8 \\\r\n  -t UTF-8 -o marcxml /dev/stdin > part01.marcxml \r\nYou can search a marc dump with the UNIX grep tool:\r\n$ yaz-marcdump -f marc-8 -t utf-8 part01.dat | \\\r\n      grep Sausalito\r\n\r\n260    $a Sausalito, Calif. : $b University Science Books, $c 2000.\r\n260    $a Sausalito, Calif. : $b Math Solutions Publications, $c c2000.\r\n260    $a Sausalito, Calif. : $b Post-Apollo Press, $c c2000.\r\n260    $a Sausalito, Calif. : $b University Science Books, $c c2002.\r\n260    $a Sausalito, Calif. : $b Post-Apollo Press, $c c2000.\r\n260    $a Sausalito, CA : $b Toland Communications, $c c2000.\r\n260    $a Sausalito, CA : $b In Between Books, $c 2001.\r\n[...]\r\nThe yaz-marcdump tool supports the character sets UTF-8, MARC-8, ISO8859-1, ISO5426 and some other encodings. For more information, see the yaz-iconv manual pages.\r\nIn this article I showed how to validate, convert, or fix bibliographic data dumped in MARC format. Next time I will show some advanced examples how to analyze MARC records on modern standard PC hardware.\r\n// Z39.50 for Dummies - Part 5\r\nby Wolfram Schneider on 2010/01/13\r\n(http://www.indexdata.com/blog/2010/01/z3950-dummies-part-5)\r\nThis is part 5 of the series Z39.50 for dummies. In the 4th part I showed how to run convert MARC21 records to line format or XML.\r\nIn this article I will show you how to analyze MARC data on a modern PC hardware. PC are very fast now and incredibly cheap. You can rent a quad-core Intel machine with 8GB RAM and unlimited traffic for 40 Euro/month (+VAT) in a data center.\r\nIf the computer is fast enough, you don’t have to spend too much time on complex algorithms. You can use the raw power of your computer and do a brute force approach.\r\nIn the following example I will use the 7 million records from a dump of the Library of Congress (LoC) catalog. For details, please read the previous article Z39.50 for Dummies - Part 4.\r\n$ for i in *.dat; do\r\n    yaz-marcdump -f marc-8 -t utf-8 -o line\r\n  done > loc.txt\r\n\r\n$ du -hs loc.txt\r\n4.9G\r\nThe line dump of the LoC is 4.9GB large and fits into main memory - great!\r\n# count for the last name “Calaminus”\r\n$ egrep -c Calaminus loc.txt\r\n4 hits, the search took 4 seconds real time\r\n# count records with <span class=\"caps\">ISBN<\/span> number\r\n$ egrep -c ^020 loc.txt\r\n3999863\r\nThere are nearly 4 million ISBN numbers (out of 7 million records). The search took 11 seconds.\r\n# count <span class=\"caps\">URL<\/span>s\r\n$ egrep -c http:// loc.txt\r\n265540\r\nThere are 265,540 URLs in the LoC records.\r\n# check for subject headings for the city of \r\n# Sausalito, California using regular expression\r\n$ egrep -c ‘^[67][0-<span class=\"caps\">9[0<\/span>-9].*Sausalito’ loc.txt\r\n19\r\nThere are 19 subject headings for Sausalito\r\n# search with a typo in name (a => o)\r\n$ egrep Sausolito loc.txt\r\nNo hits due a typo in the name, try it with agrep, a grep program with approximate matching capabilities:\r\n$ agrep -c -1 Sausolito loc.txt\r\n282\r\n282 hits, the search took 8 seconds\r\nThe examples above are for software developers and experienced librarians. They are helpful for a quick check of your bibliographic records, for data mining, analyzing or to double-check if your indexer works correctly.\r\nIf you want setup a public system for end-users you need of course a real full text engine as our zebra software.\r\nRead the other articles of the series Z39.50 for Dummies: Part I, Part II, Part III, Part IV, Part V\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-16T01:19:55+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-07-07-wintaskschedulerforcygwin/",
    "title": "Win Task Scheduler for cygwin",
    "description": "HowTo run bash scripts via Cygwin as Scheduled Task (i.e. \"Aufgabenplanung\") in Windows",
    "author": [
      {
        "name": "Olaf Schmalfuß",
        "url": {}
      }
    ],
    "date": "2020-07-07",
    "categories": [],
    "contents": "\r\nHowTo run bash script via Cygwin as Scheduled Task (i.e. “Aufgabenplanung”) in Windows\r\nFor process automation it is not necessary to rely on Outlook reminders if you’re on Windows and cannot (or want not) run Cron as a service to schedule scripts or programs:\r\nWindows brings its native service called “Scheduled Tasks” (or “Aufgabenplanung” in the German version)\r\n// Open “Scheduled Tasks” App\r\nhit Windows Key + R to open command prompt, enter taskschd.msc, which works regardless of Win version/ language\r\nalternatively\r\nsearch APP for either “Scheduled Task” or “Aufgabenplanung”\r\nor locate the “EXE” in C:\\Windows\\System32\\taskschd.msc\r\n…\r\n\r\n// Set up a new Job\r\nRight-click on an empty space in the Tasks’ overview and select “new task” (i.e. “Einfache Aufgabe erstellen”).\r\nIn “Actions” (i.e. “Aktionen”) enter the path to cygwin in the “Program/script” field, e.g.C:\\cygwin64\\bin\\bash.exe\r\nIn the “Add arguments” box, enter “-l -c” and the full path to the bash command to run surrounded by quotes in UNIX notation, i.e. with forward slashes and as seen from within cygwin, and not simply the Windows path, e.g.-l -c \"/tmp/pdw_test/pull_chapter_report_from_jobscheduler.sh\"\r\n -l: Run as if logged on at a shell\r\n -c: Run this command\r\nIn the “Start in” field enterC:\\cygwin64\\bin\r\nAdd a description and give your task a meaningful name, so that when you come back to it in a year you know what it’s for and you’re done!\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-07-07-wintaskschedulerforcygwin/example.png",
    "last_modified": "2022-03-10T01:51:03+01:00",
    "input_file": {},
    "preview_width": 1258,
    "preview_height": 839
  },
  {
    "path": "posts/2018-05-05-download-youtube-using-only-vlc/",
    "title": "download YouTube without browser extension using only VLC",
    "description": "There is a multitude of browser add-ons and extensions available for downloading YouTube videos that usually somewhat obscure, but there is actually nothing more needed than the popular VLC player. Here is how!",
    "author": [
      {
        "name": "Olaf Schmalfuss",
        "url": "https://www.datamercs.net"
      }
    ],
    "date": "2018-05-05",
    "categories": [],
    "contents": "\r\n// Introduction\r\nIn our HowTo download “Mediathek” features for archival purposes we looked into how to download features from your typical German public broadcasting Mediathek.\r\nWe might want a similar solution to YouTube for having videos available offline, e.g. for live presentations when internet service cannot be guaranteed.\r\nRegrettably the same trick is not working for YouTube. Naturally, there is a multitude of browser add-ons and extensions available for downloading YouTube videos that might range from deprecated to outright malicious, but are usually somewhat obscure.\r\nBut, as of writing this, there is actually nothing more needed than the popular VLC player↗.\r\nVLC is a feature packed, free and open source cross-platform multimedia player and framework that plays virtually all multimedia files as well as DVDs, Audio CDs, VCDs, and various streaming protocols.\r\nDownload here, as this is what we will use: https://www.videolan.org\r\n// Download originial YouTube video with VLC\r\nVLC does not only play music or videos from disk, but is also a complete software solution for video streaming that can be used to capture and transcode media streams, such as YouTube videos!\r\nFor information, also on the command line options see the documentation here: https://wiki.videolan.org/Documentation:Streaming_HowTo_New/\r\nFor the most straight forward approach we will go as follows:\r\nOpen YouTube video and copy the URL\r\nin VLC hit Ctrl + N\r\nalternatively: Media >> Open Network Stream (Ctrl + N)\r\npaste copied link as network URL into VLC\r\n\r\n\r\n\r\nhit Play\r\nthen Ctrl+J to view the Current Media Information\r\nalternatively: Tools >> Codec Information\r\nCopy the URL given under Location\r\n\r\n\r\n\r\npaste the copied Codec-URL back into the browser\r\nright click on video and save\r\nalternatively: download using curl\r\n\r\n$ curl \"your_copied_Codec-URL_here\" -o YT.mp4\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-03-14T14:41:50+01:00",
    "input_file": "download-youtube-using-only-vlc.knit.md"
  },
  {
    "path": "posts/2018-04-05-rbbkultur-mediathek-downloader/",
    "title": "rbbKultur - Mediathek-Downloader",
    "description": "HowTo download \"Mediathek\" features for archival purposes",
    "author": [
      {
        "name": "Olaf Schmalfuß",
        "url": {}
      }
    ],
    "date": "2018-04-05",
    "categories": [],
    "contents": "\r\nrbbKultur - Mediathek-Downloader\r\n// Introduction\r\nFor archival or educational purposes it might be useful to know how to download content from public radio and TV broadcasters’ archives, i.e. “Mediathek”.\r\nThis only works, when the program is archived as a whole file in a convenient format like mp3 or mp4, and not in a chunked m3u streaming format. This we will see in step 4. below. So if we encounter m3u, we will use VLC instead to capture and convert the stream, see:link to VLC howto\r\n1. select Program\r\nrbbKultur - Mediathek\r\n\r\nhttps://www.kulturradio.de/zum_nachhoeren/\r\n\r\nchose date and program\r\n2. inspect element\r\ni.e. launch Developer Tools\r\nFireFox: CTRL+SHIFT+C\r\nChrome: CTRL+SHIFT+I\r\n\r\n3. Start Mediathek player\r\ni.e. start the podcast or video once we have the Developer Tools open, so that we can analyze the traffic under Network\r\n4. back in Developer Tools\r\nunder Network right click on the File (media/ mpeg)\r\nthen Copy URL or copy as cURL\r\n\r\n\r\n\r\n5. Download via bash script\r\nadjust script\r\n\r\nrbb_downloader()\r\n  {\r\n    if [ -z \"$1\" ]\r\n      then echo \"Dateiname fehlt\"\r\n    elif [ -z \"$2\" ]\r\n      then  \"Download URL fehlt\"\r\n    else\r\n      DWNDIR=/tmp/Downloads/AlteMusik\r\n      AMDOWN=$1\r\n      rbbmediapmdp=$2\r\n      curl $rbbmediapmdp -o $DWNDIR/\"$AMDOWN\"\r\n      ls -htl $DWNDIR\r\n  fi\r\n  }\r\n  \r\n# usage:\r\nrbb_downloader \"File_Name\" \"Download_URL\"\r\n\r\noptional: save in bashrc\r\n\r\nC:\\cygwin64\\home\\schmalfuss\\.bashrc\r\n\r\nrun\r\ne.g. \r\n\r\n\r\nrbb_downloader \"Alte Musik - 2020-07-08 - Heinrich Isaac - Lieder und Motetten.mp3\" \"https://rbbmediapmdp-a.akamaihd.net/content/74/da/74da3627-5312-4f34-b681-93c48f12202d/0a858af8-b788-430b-9f5a-b5c678701a18_53d97702-265a-4586-a6d8-c8c7ad9bac80.mp3\"\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2018-04-05-rbbkultur-mediathek-downloader/dwnfunction.png",
    "last_modified": "2022-03-14T14:32:01+01:00",
    "input_file": "rbbkultur-mediathek-downloader.knit.md",
    "preview_width": 432,
    "preview_height": 274
  },
  {
    "path": "posts/2017-11-09-bash-test-command/",
    "title": "bash 'test' command",
    "description": "A mental note and short reminder on how to use the \"test\" command in bash if-loops or using the && and || operators for conditional scripting.",
    "author": [
      {
        "name": "Olaf Schmalfuß",
        "url": "https://www.datamercs.net"
      }
    ],
    "date": "2017-11-09",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nUsing ‘test’ in loops / conditional statements\r\nif-else\r\n&& and || operators\r\n\r\nUsing ‘test’ for checking files - test existence\r\nUsing ‘test’ for checking variables\r\nfurther reading\r\n\r\nIntroduction\r\nThis is a short introduction - and personal reminder - on how to use the test command.\r\nThe Google “Shell Style Guide”↗ prefers double [[ … ]] over the older (but POSIX portable) single [ … ] or literal test and I won’t question this. 1\r\nThe test command returns 0 (True) or 1 (False), which we can use conditionally in if-loops or using the && and || operators, and one could also simply examine the return value by displaying $? e.g.\r\n\r\n$ [[ \"foo\" != \"bar\" ]]; echo $?\r\n0\r\n\r\n$ [[ \"foo\" == \"bar\" ]]; echo $?\r\n1\r\n\r\n$ [[ \"foo\" == \"foo\" ]]; echo $?\r\n0\r\n\r\n$ [[ \"foo\" != \"foo\" ]]; echo $?\r\n1\r\n\r\n$ [[ 5 > 2 ]]; echo $?\r\n0\r\n\r\nThere are tons of applications, but we will mostly use it to grep for certain outputs or check variables or for the existence of files.\r\nConsult help test for further details.\r\nUsing ‘test’ in loops / conditional statements\r\nif-else\r\n\r\n\r\nvar=baz # this is our test input, i.e. [[ \"foo\" == $var ]] will return \"False\" (i.e. \"1\"): [[ \"foo\" == $var ]]; echo $? vs. [[ \"baz\" == $var ]]; echo $?\r\n\r\nif [[ \"foo\" == $var ]]; then\r\n  echo \"VAR equals foo\"\r\nelif [[ \"bar\" == $var ]]; then\r\n  echo \"VAR equals bar\"\r\nelse\r\n  echo \"we got it all wrong and VAR equals something else\"\r\nfi\r\n\r\nThe use of echo here is just a substitute for any other command that might be used here.\r\n&& and || operators\r\nThere is a more cunning, and cryptic or 31337, way of writing if-statements using the && and || operators.&& and || are actually LOGICAL operators, i.e.\r\n\r\n&& = AND\r\n|| = OR\r\n\r\nthe general logic for scripting or chaining commands would be\r\n\r\n\"FOO ; BAR\"      # Run FOO and then BAR, regardless of success of FOO\r\n\"FOO && BAR\"     # Run BAR if FOO succeeded, i.e. returns \"True\"\r\n\"FOO || BAR\"     # Run BAR if FOO failed, i.e. returns \"False\"\r\n\"FOO &\"          # Run FOO in the background.\r\n\"FOO | BAR\"      # pipe the output of FOO into BAR for further processing\r\n\r\nto substitute an if-else-loop with && and || use as follows\r\n\r\n# the nifty way\r\n[[ \"foo\" != \"bar\" ]] && echo \"true, foo != bar\" || echo \"if false, obviously VAR must have been foo then as well\"\r\n\r\n# which is the same as\r\nif [[ \"foo\" != \"bar\" ]]; then\r\n  echo \"true, foo != bar\"\r\nelse\r\n  echo \"if false, obviously VAR must have been foo then as well\"\r\nfi\r\n\r\nthese operators can also be used to chain multiple tests/ conditions together into one test e.g.\r\n\r\n$ var=baz\r\n# OR; is one or the other \"True\"\r\n$ [[ \"foo\" == $var || \"baz\" == $var ]] && echo \"true\" || echo \"false\"\r\ntrue\r\n# AND; both must be \"True\"\r\n$ [[ \"foo\" == $var && \"baz\" == $var ]] && echo \"true\" || echo \"false\"\r\nfalse\r\n\r\nUsing ‘test’ for checking files - test existence\r\nFor example, when I’m downloading, extracting and forwarding files based on a list of ISBNs and do not know whether I’ll find a package for each of the given ISBNs, then I need to know the failed ISBN, so that I do not include it within my extra metadata file, in which I only want to provide data for succeeded ISBNs. Obviously, I’m aware that I could include a test at an earlier stage already, but this is my workshop;-)\r\n\r\nISBNLIST=ISBNs4NYU.txt\r\nBASEDIR=$(pwd)\r\nWORKDIR=$BASEDIR/ProQuest_Deposit_$(date +%F); mkdir $WORKDIR; cp $ISBNLIST $WORKDIR; cd $WORKDIR\r\n\r\n# Download WebPDFs directly out of the PDW\r\nfor ISBN in $(cat $ISBNLIST); do\r\n  echo $ISBN\r\n  # getting \"documentId\"\r\n  DOCUMENTID=$(curl -s --proxy \"http://proxy-URL:1337\" https://product-data-warehouse-URL/publication/$ISBN | grep '\"id\"' | head -n1 | grep -oP '(?<=\"id\" : \").+?(?=\")')\r\n  # downloading ZIP\r\n  curl -s --proxy \"http://proxy-URL:1337\" https://product-data-warehouse-URL/document/$DOCUMENTID/zip -o $ISBN.zip\r\n  # unzip WebPDF only\r\n  unzip -q -j $ISBN.zip *$DOCUMENTID.pdf\r\n  # rename to ISBN.pdf\r\n  mv $DOCUMENTID.pdf $ISBN.pdf\r\n  # if WebPDF exists, then upload to target FTP\r\n  if [[ -f $ISBN.pdf ]]; then\r\n    curl -T $ISBN.pdf -u UN:PW ftp://ftp.data-recipient.com/upload/\r\n    echo \"$ISBN\" >> isbn_list_4_onix.txt\r\n    else echo \"$ISBN\" >> WebPDF_missing.txt\r\n  fi\r\n  # clean-up\r\n  rm $ISBN.zip $ISBN.pdf\r\ndone\r\n\r\ncd $BASEDIR\r\n\r\nI usually only need -f, but again check help test for other useful options like\r\n\r\nFile operators:\r\n-d FILE           True if file is a directory.\r\n-e FILE           True if file exists [regardless of type, e.g. file, directory, device etc.].\r\n-f FILE           True if file exists and is a regular file [and not a directory or device etc.].\r\n-s FILE           True if file exists and is not empty.\r\nA -nt B           Test if file A is newer than file B, by modification date.\r\nA -ot B           Test if file A is older than file B.\r\n\r\nThis check could also be negated, so that the outcome is “True” when the file does NOT exist:\r\n\r\nif [[ ! -f $ISBN.pdf ]]; then\r\n    echo \"$ISBN.pdf does not exist.\"\r\nfi\r\n\r\nUsing ‘test’ for checking variables\r\nFor example, I want to prompt the user to specify a file, like an ISBN list, when there was no command line argument (i.e. $1) given in the first place:\r\n\r\n# check for input variable, if empty prompt for file in current directory, else move on with the given input variable\r\nif [[ -z \"$1\" ]]; then\r\n  echo; echo \"Please select ISBN list: (choose number)\"; echo\r\n  select L in *; do test -n \"$L\" && break; echo \">>> Invalid Selection\"; done\r\nelse\r\n  L=$1\r\nfi\r\n\r\n\r\nString operators:\r\n-z STRING           True if string is empty.\r\n-n STRING           True if string is NOT empty.\r\n\r\n\r\n# nifty alternative\r\n[[ -z \"$var\" ]] && echo \"true, VAR is empty\" || echo \"false, VAR is Not empty\"\r\n\r\nfurther reading\r\nThis IBM tutorial on Bash test and comparison functions↗ is also very helpful.  \r\n to be continued …\r\n\r\n [[ … ]] reduces errors as no pathname expansion or word splitting takes place between [[ and ]]. In addition, [[ … ]] allows for regular expression matching, while [ … ] does not. ↩︎\r\n",
    "preview": "posts/2017-11-09-bash-test-command/helptest.png",
    "last_modified": "2022-02-24T16:51:35+01:00",
    "input_file": {},
    "preview_width": 640,
    "preview_height": 320
  },
  {
    "path": "posts/2017-08-24-howto-batch-rename-on-the-command-line/",
    "title": "Howto batch rename on the command line",
    "description": "Renaming files is one of the everyday tasks, for which many people genuinely scramble and download the most dubious programs from the internet, while one could actually do this pretty easy with command line tools.  \nHere we will put down some quick and easy bash and PowerShell examples that anybody can do!",
    "author": [
      {
        "name": "Olaf Schmalfuß",
        "url": "https://www.datamercs.net"
      }
    ],
    "date": "2017-08-24",
    "categories": [],
    "contents": "\r\n\r\nContents\r\n// Introduction\r\n// renaming files in bash\r\n// renaming files in PowerShell\r\n// rename using mapping list\r\n\r\n// Introduction\r\nRenaming files is a quite common everyday task, especially when you receive many files in different formats that have to be aligned to your in-house standards, or when on the other hand you have to send out lots of files and have to meet the data recipients specification, which coincidentally I both have to do quite regularly.\r\nThus, here’re some assorted oneliners for future reference, quick copy&pastes or for sharing.\r\n// renaming files in bash\r\nWhile there are certainly dedicated libraries for renaming files, like ‘rename’, renaming can be achieved basically with native bash functions only, using cp or mv together with sed or shell parameter expansion↗\r\nIn the following example we need to mass rename files from\r\n\r\nepub_dgo_9783110947649.zip to epub_dgo_9783110947649.zip\r\n\r\ni.e. ‘simply’ changing ‘dgo’ to ‘arv’, but this could also be used to change or normalize file extensions, like ‘.tiff’ to ‘.tif’ etc.\r\nObviously, use cp instead of mv if you want to keep your original files or if unsure whether the ${parameter/pattern/string} replacement will work;-)\r\n\r\n# rename scripts (from 1337 to legible)\r\n\r\n#1#\r\nfor f in *; do mv \"$f\" \"${f/dgo/arv}\"; done\r\n\r\n#1.2 change file extension from '.html' to '.txt'\r\nfor f in *.html; do mv \"$f\" \"${f%.html}.txt\"; done\r\n#1.3 or simply append ext\r\nfor f in *; do mv \"$f\" \"${f}.txt\"; done\r\n\r\n#2#\r\nfor f in * ; do mv $f $(echo $f | sed 's/dgo/arv/'); done\r\n\r\n#3#\r\nfor f in *; do\r\n  fnew=$(sed 's/dgo/arv/' <<< $f)\r\n  mv $f $fnew\r\ndone\r\n\r\n// renaming files in PowerShell\r\nIf you are on Windows and have no bash options like cygwin or the Windows Subsystem for Linux then you can easily achieve the same result using PowerShell.\r\nGiven the same example from above, i.e. changing ‘dgo’ to ‘arv’, just try the following:\r\n\r\n#4# PowerShell rename\r\ndir | rename-item –newname { $_.name.replace(\"dgo\",\"arv\") }\r\n\r\n// rename using mapping list\r\nIf there’re varying patterns or people like to create a mapping list using Excel instead, with the OLD_NAME next to the NEW_NAME in two columns, we can use that mapping as well in a tab separated TXT/ TSV file (e.g. rename.tsv) to batch rename files.\r\nThe code is basically adding the mv function again to each line and piping that mv -vi \"OLD_NAME\" \"NEW_NAME\"; back into bash for execution:\r\n\r\nsed 's/^/mv -vi \"/;s/\\t/\" \"/;s/$/\";/' < rename.tsv | bash -\r\n\r\nThe double quotes ( ” ) allow for unexpected white spaces in the file names - better be safe but sorry.\r\n\\(^_^)\r\n\r\n\r\n\r\n",
    "preview": "posts/2017-08-24-howto-batch-rename-on-the-command-line/manrename.png",
    "last_modified": "2022-03-11T15:24:24+01:00",
    "input_file": "howto-batch-rename-on-the-command-line.knit.md",
    "preview_width": 640,
    "preview_height": 320
  },
  {
    "path": "posts/2015-02-02-working-with-kbart-files/",
    "title": "Working with KBART files",
    "description": "KBART files are standardized title lists in .TXT format, that specify electronic collections. This is to provide a short overview on what to expect from this metadata format and how to work with it as publisher or librarian.",
    "author": [
      {
        "name": "Olaf Schmalfuss",
        "url": "https://www.datamercs.net"
      }
    ],
    "date": "2015-02-03",
    "categories": [],
    "contents": "\r\n\r\nContents\r\n// Introduction\r\n// What is a knowledge base?\r\n\r\n// KBART at De Gruyter\r\n// Working with KBART\r\n// how to open a KBART file (with Excel)\r\n// how to customzie, i.e. filter a KBART file\r\n\r\n\r\n// Introduction\r\nKBART, which stands for “Knowledge Bases and Related Tools,” is a NISO Recommended Practice↗.\r\nVery simply, KBART recommends best practices for the communication of electronic resource title list and coverage data from content providers to knowledge base (KB) suppliers. KBART specifies file format, delivery mechanisms and fields to include, and it applies to both serials and monographs.\r\nThus, a single KBART file is basically a standardized list, separated by TAB in .TXT format.\r\nBy specification KBARTs are not intended for rich bibliographic description, but work in tandem together with MARC records and chunk level data like BITS and JATS XML to provide the collection level information for full scale title information and discoverability within our model of the trinity of discovery↗.\r\n// What is a knowledge base?\r\nA knowledge base is an extensive database maintained by a knowledge base supplier that contains information about electronic resources such as title lists, coverage dates, inbound linking syntax, etc. Knowledge bases typically organize the resources provided by a content provider into collections or databases that reflect specific content provider offerings, for example packages of e-journals, e-books, or other materials. Knowledge bases can be customized by individual institutions to reflect their local collections.\r\nKnowledge bases are used to provide data for OpenURL link resolvers and to populate library discovery systems with an institution’s e-resource holdings data. Many libraries also use knowledge base data in library catalogues, for e-journal title lists, in electronic resource management systems (ERMs), and in other tools.\r\nKnowledge base suppliers ingest the data into their KBs, and libraries then select the packages and titles that they have access to.\r\nLibraries can also use KBART to create files for custom local and consortial packages and load them into their local knowledge bases. Some librarians also find KBART title list files useful for understanding a content provider’s offerings or determining the contents of a standard package they have purchased.\r\nsee also KBART FAQ↗\r\n// KBART at De Gruyter\r\nare being created for\r\nall past and present eBook packages\r\nincluding certain customised consortia packages\r\nexcept those for internal usage only (>>> blacklist)\r\n\r\nall active eJournal packages\r\nall databases, in one database KBART file\r\nOpen Access KBARTs, one for eBooks one for eJournals\r\ntwo collection files, one for eBooks one for eJournals\r\none KBART for all “out of print” eBooks\r\nThe workflow and toolchain I created for that will be laid out, as far as possible, at a later stage, bringing together data from multiple sources, utilizing SQL, bash and RStudio, loading the data to all relevant data recipients, i.e. KBs and end customers etc. via FTP and email, and host the data on a customized metadata portal for public access and self-service1.\r\nThis development was necessary after switching from a couple of fixed front list eBook packages a year to more and more complex and dynamic products, like PDA/ EBA and publisher partners’ packages.\r\n// Working with KBART\r\n// how to open a KBART file (with Excel)\r\nWhile this question seems a little odd, about how to open a simple .TXT file, in reality it appears that the common librarian, or sales or marketing person, is actually not necessarily that used to working with .TXTs, that I got so many questions on how to read or use such a file in Excel, that I even might make an instructional video about that, just for reference.\r\nYet admittedly, there might be the one or other obstacle that we could address here already, on …\r\n// … the art of how to open a KBART file in Excel\r\nafter downloading the .TXT file\r\nright click, open with\r\ndrag into (closed) Excel, i.e. onto the icon\r\nnot possible with the Excel icon…\r\n… but working with LibreOffice\r\n\r\ndrag into (open) Excel\r\nopen in notepad, then copy&paste all into Excel (which is what I usually do)\r\nopen from inside Excel\r\nimport from inside Excel\r\nrename .txt to .xls/.xlsx\r\nBUT “dragging&dropping” into as well as “right-click, open-with” Excel poses a special, UTF-8 related problem, as Excel is not smart enough to recognize the encoding this way, and naturally, we are dealing with lots of German, French and Greek characters in scientific literature, which causes special characters and Umlauts to get mangled in Excel.\r\nA solution for that would be to convert or encode the KBART file to UTF-8 WITH BOM first, for example in notepad++↗\r\nAnd while according to the Unicode standard the use of a “Byte Order Mark” (BOM) is neither required nor recommended for UTF-82, it can be crucial for UTF-8 recognition in Excel, and may make all the difference between Gibberish and German.\r\nThus, it’s “allowed” in contexts where a particular protocol (e.g. Microsoft conventions for .txt files) may require use of the BOM on certain Unicode data streams, such as KBART/.TXT files. When you need to conform to such a protocol, use a BOM3.\r\nLibreOffice↗ on the other hand just works, yet won’t open right away, but will ask first.\r\nFor me the easiest solution is to open in notepad++ first, the copy&paste all into Excel, making sure that only TAB is used as delimiter, et voilà!\r\n// how to customzie, i.e. filter a KBART file\r\n// filter KBART against a list of ISBNs\r\nFor pick&choose collections, where no off-the-shelf package and thus no dedicated KBART file is available, we’ll filter the complete KBART file based on an ISBN list, with each ISBN on its own line and EOL in UNIX format, i.e. \\n, e.g. ‘filter_file.txt’.\r\nAlso, we will keep one of the column names from the header in the first line, to grep the header of the KBART as well, e.g. ‘ONLINE_IDENTIFIER’\r\n\r\n# our 'filter_file.txt' looks as follows:\r\n$ cat filter_file.txt\r\nONLINE_IDENTIFIER\r\nISBN1\r\nISBN2\r\nISBN3\r\n...\r\n..\r\n.\r\n\r\n# assuming the complete KBART is in the same folder as the filter_file, we'll use 'LC_ALL=C fgrep' for faster execution:\r\n$ LC_ALL=C fgrep -i -f filter_file.txt degruyter_global_ebooks_* > DG_KBART_$(date +%F).txt\r\n\r\n\r\nhttps://oschmalfuss.github.io/degruyter/FTP-Index.html ↗↩︎\r\nhttps://www.unicode.org/versions/Unicode12.1.0/ch02.pdf#G27981 ↗↩︎\r\nhttps://www.unicode.org/faq/utf_bom.html#bom9 ↗↩︎\r\n",
    "preview": {},
    "last_modified": "2022-03-11T15:23:21+01:00",
    "input_file": "working-with-kbart-files.knit.md"
  },
  {
    "path": "posts/2013-07-21-a-rough-guide-to-cold-brew/",
    "title": "A rough guide to cold brew",
    "description": "While to the common librarian Cory Doctorow is merely known as champion for Open Access, the Creative Commons, the EFF etc., he is also a hell of a barrista, introducing many a young scholar - the author included - to the carnality of cold brew.  \nSo, here is the rough guide for future reference.",
    "author": [
      {
        "name": "Olaf Schmalfuß",
        "url": "https://www.datamercs.net"
      }
    ],
    "date": "2013-07-21",
    "categories": [],
    "contents": "\r\n// essential reading\r\nHOWTO attain radical hotel-room coffee independence\r\neasier\r\nCheap, easy, no-mess cold-brew coffee\r\nbut frankly: simply use your French Press and let the coarse ground coffee brew over night in your fridge…\r\nEnjoy!\r\n// A prosaic how-to, or love letter\r\nas given here to its best by Cory Doctorow, in\r\n\r\nHomeland\r\n\r\n\r\nYou’ve had hot coffee before, and in the hands of a skilled maker, coffee can be amazing. But the fact is that coffee is one of the hardest things to get right in the world. Even with great beans and a great roast and great equipment, a little too much heat, the wrong grind, or letting things go on too long will produce a cup of bitterness. Coffee’s full of different acids, and depending on the grind, temperature, roast, and method, you can “overextract” the acids from the beans, or overheat them and oxidize them, producing that awful taste you get at donut shops and Starbucks.\r\nBut there is Another Way. If you make coffee in cold water, you only extract the sweetest acids, the highly volatile flavors that hint at chocolate and caramel, the ones that boil away or turn to sourness under imperfect circumstances. Brewing coffee in cold water sounds weird, but in fact, it’s just about the easiest way to make a cup (or a jar) of coffee.\r\nJust grind coffee – keep it coarse, with grains about the size of sea salt – and combine it with twice as much water in an airtight jar. Give it a hard shake and stick it somewhere cool overnight (I used a cooler bag loaded with ice from ice camp and wrapped the whole thing in bubble wrap for insulation). In the morning, strain it through a colander and a paper coffee filter. What you’ve got now is coffee concentrate, which you can dilute with cold water to taste – I go about half and half. If you’re feeling fancy, serve it over ice.\r\nHere’s the thing: cold-brew coffee tastes amazing, and it’s practically impossible to screw it up. Unlike espresso, where all the grounds have to be about the same size so that the high pressure water doesn’t cause fracture lines in the “puck” of coffee that leave some of the coffee unextracted and the rest overextracted, cold-brew grounds can be just about any size. Seriously, you could grind it with a stone axe. Unlike drip coffee, which goes sour and bitter if you leave the grounds in contact with the water for too long, cold-brew just gets yummier and yummier (and more and more caffeinated!) the longer the grounds sit in the water. Cold-brewing in a jar is pretty much the easiest way to make coffee in the known universe – if you don’t mind waiting overnight for the brew – and it produces the best-tasting, most potent coffee you’ve ever drunk. The only downside is that it’s kind of a pain in the ass to clean up, but if you want to spend some more money, you can invest in various gadgets to make it easier to filter the grounds, from cheap little Toddy machines all the way up to hand-blown glass “Kyoto drippers” that look like something from a mad scientist’s lab. But all you need to make a perfectly astounding cup of cold-brewed jet fuel is a mason jar, coffee, water, and something to strain it through. They’ve been making iced coffee this way in New Orleans for centuries, but for some unknown reason, it never seems to have caught on big-time.\r\n[…]\r\nIt’s funny watching someone take a sip of cold-brew for the first time, because it looks and smells strong, and it is, and coffee drinkers have been trained to think that “strong” equals “bitter.” The first mouthful washes over your tongue and the coffee flavor wafts up the back of your throat and fills up your sinus cavity and your nose is all, “THIS IS INCREDIBLY STRONG!” And the flavor is strong, but there isn’t a hint of bitterness. It’s like someone took a cup of coffee and subtracted everything that wasn’t totally delicious, and what’s left behind is a pure, powerful coffee liquor made up of all these subtle flavors: citrus and cocoa and a bit of maple syrup, all overlaid on the basic and powerful coffee taste you know and love.\r\n\r\n(CC BY-NC-ND 3.0)\r\n\r\n\r\n\r\n",
    "preview": "posts/2013-07-21-a-rough-guide-to-cold-brew/cold_brew_cats.jpg",
    "last_modified": "2022-02-15T22:38:33+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2013-05-23-marcedit-under-ubuntu-linux/",
    "title": "MarcEdit under Ubuntu Linux",
    "description": "HowTo install MarcEdit under Ubuntu 13.04, via Mono or Wine",
    "author": [
      {
        "name": "Olaf Schmalfuß",
        "url": "https://www.datamercs.net"
      }
    ],
    "date": "2013-05-23",
    "categories": [],
    "contents": "\r\noriginally posted here\r\n// MarcEdit via MONO\r\nTerry Reese’s only install instructions for Linux on his Worklog: http://blog.reeset.net/archives/805. The mentioned “Install.txt” does not even exist in the latest iteration of MarcEdit, see the relevant part below.\r\nThere is also a tutorial on Youtube: https://www.youtube.com/watch?v=N65IHRiRby8\r\nThe following set-up was done on Ubuntu 13.04\r\n\r\n# install MonoDevelop (http://monodevelop.com/)\r\nsudo apt-get install monodevelop\r\n\r\n# create you MARC records working directory\r\nmkdir MarcRecords; cd MarcRecords\r\n\r\n# download the latest version of MarcEdit from http://marcedit.reeset.net/downloads and unzip\r\nwget http://marcedit.reeset.net/software/marcedit_other.zip; unzip marcedit_other.zip; rm marcedit_other.zip\r\n\r\n# following the MarcEdit install instructions run the following command once (also check other dependencies: http://blog.reeset.net/archives/805):\r\nmono ~/MarcRecords/marcedit_linux/linux_bootloader.exe\r\n\r\n# a permanent alias makes it easier to start MarcEditin the future\r\necho \"alias marcedit='mono ~/MarcRecords/marcedit_linux/MarcEdit.exe'\" >> ~/.bash_aliases\r\n\r\n# restart Terminal in order to activate the alias\r\n\r\n# start MarcEdit.exe via alias \"marcedit\"\r\nmarcedit\r\n\r\n# or start MarcEdit.exe via\r\nmono ~/MarcRecords/marcedit_linux/MarcEdit.exe\r\n\r\nFrom Terry Reese’s “MarcEdit Installation Instructions”:\r\n\r\nInstall.txt Last Modified: 12/28/2009\r\n\r\n\"LINUX/OTHER INSTALLATION PROCEDURE:  \r\n\r\n1.1  INSTALLATION FROM ZIP  \r\n\r\na) Ensure that the dependencies have been installed  \r\n   1) Dependency list:  \r\n      i) MONO 2.4+ (Runtime plus the System.Windows.Forms library [these are sometimes separate])  \r\n     ii) YAZ 3 + YAZ 3 develop Libraries + YAZ++ ZOOM bindings  \r\n    iii) ZLIBC libraries  \r\n     iV) libxml2/libxslt libraries  \r\nb) Unzip marcedit.zip  \r\nc) Navigate to the MarcEdit program directory and run linux_bootloader.exe (example, mono linux_bootloader.exe)  \r\nd) Yaz.Sharp.dll.config — ensure that the dllmap points to the correct version of the shared libyaz object.  \r\ne) main_icon.bmp can be used for a desktop icon  \r\nf) On first run:  \r\n   a) mono MarcEdit.exe  \r\n   b) Preferences tab will open, click on other, and set the following two values:  \r\n      i) Temp path: /tmp/  \r\n     ii) MONO path: [to your full mono path; likely /usr/bin/mono]\"  \r\n// MarcEdit via WINE\r\n\r\nsudo apt-get install wine\r\n\r\nWINEPREFIX='/home/USERNAME/wine32' WINEARCH='win32' wine 'wineboot'\r\nWINEPREFIX='/home/USERNAME/wine32' bash winetricks dotnet40 corefonts\r\n\r\nwget http://marcedit.reeset.net/software/MarcEdit_Setup.msi\r\n\r\nWINEPREFIX='/home/USERNAME/wine32' msiexec /i MarcEdit_Setup.msi\r\n\r\nrm MarcEdit_Setup.msi\r\n\r\necho \"alias winmarc='WINEPREFIX='/home/USERNAME/wine32' wine /home/USERNAME/wine32/drive_c/Program\\ Files/MarcEdit\\ 5.0/MarcEdit.exe'\" >> ~/.bash_aliases\r\n\r\n# restart Terminal\r\n\r\n# start MarcEdit.exe via alias \"winmarc\"\r\nwinmarc\r\n\r\n# or start MarcEdit.exe via\r\nWINEPREFIX='/home/USERNAME/wine32' wine /home/USERNAME/wine32/drive_c/Program\\ Files/MarcEdit\\ 5.0/MarcEdit.exe\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-15T22:34:53+01:00",
    "input_file": {}
  }
]
